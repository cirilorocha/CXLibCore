#INCLUDE "Protheus.ch"
#INCLUDE "RWMake.ch"
#Include "ParmType.ch"
#Include "CXInclude.ch"
#INCLUDE "CXStruct.ch"

//#############################################################################
//##+----------+------------+-------+---------------------+------+----------+##
//##|Programa  | CXFieldPut | Autor | Cirilo Rocha        | Data |02/08/2011|##
//##+----------+------------+-------+---------------------+------+----------+##
//##|Descr.    | Função customizada para simplificar o uso da função padrão |##
//##|          | FieldPut.                                                  |##
//##|          |                                                            |##
//##|          | Ao invez de utilizar FieldPut(FieldPos(cCampo)) pode-se    |##
//##|          | usar apenas U_CXFieldPut(cCampo)                           |##
//##|          |                                                            |##
//##|          | Tem compatibilidade com campos memos antigos (SYP)         |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |Programador| Manutenção efetuada                            |##
//##+----------+-----------+------------------------------------------------+##
//##| 16/02/12 | Cirilo R. | Ajuste para obter a tabela por parâmetro ou com|##
//##|          |           |  base no próprio campo visando simplificar o   |##
//##|          |           |  uso desta função                              |##
//##| 22/02/12 | Cirilo R. | Acrescentado tratamento de erro para os casos  |##
//##|          |           |  do campo não existir no dicionário            |##
//##| 23/02/12 | Cirilo R. | Feito tratamento para campos Memo virtuais     |##
//##|          |           | (antigos)                                      |##
//##| 28/09/12 | Cirilo R. | Otimização para gravar apenas quando o conteu- |##
//##|          |           |  do for diferente.                             |##
//##| 01/10/12 | Cirilo R. | Tratamento para campos tipo Data em que o novo |##
//##|          |           |  novo conteudo foi passado na forma string     |##
//##| 08/10/12 | Cirilo R. | Ajuste para gravação de campos memo            |##
//##| 08/10/13 | Cirilo R. | Ajustado o retorno para considerar apenas .T.  |##
//##|          |           |  ou .F. se alterou o conteudo do campo         |##
//##| 07/11/13 | Cirilo R. | Correção no tratamento dos campos Memo         |##
//##|          |           | Alterado o padrão para obter o alias do a par- |##
//##|          |           |  tir do campo e não da área atual              |##
//##| 22/10/15 | Cirilo R. | Pequena otimização no fonte                    |##
//##| 05/01/18 | Cirilo R. | Otimização geral do fonte                      |##
//##| 03/09/19 | Cirilo R. | Pequena revisão no fonte                       |##
//##| 12/10/21 | Cirilo R. | Pequena revisão (release 33)                   |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
User Function CXFieldPut(	cCampo		,;	//01 cCampo
							uConteudo	,;	//02 uConteudo
							cAlias		,;	//03 cAlias
							lAliasCpo	,;	//04 lAliasCpo
							lInclui		);	//05 lInclui
								AS Logical

	//Declaracao de variaveis----------------------------------------------------------------------
	Local uAtual		AS Variant
	
	Local lAlterou		AS Logical
	Local lMemo			AS Logical
	Local oArea			AS Object

	Local nPosCpo		AS Numeric
	Local nPosIni		AS Numeric
	Local nPosFim		AS Numeric
	Local cIni			AS Character
	Local cCpoMemo	    AS Character
	Local nTamCpo		AS Numeric
	Local cTipo			AS Character
	Local lGrava		AS Logical

	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR cCampo			AS Character
	ParamType 1		VAR uConteudo		AS Character,Numeric,Date,Logical
	ParamType 2		VAR cAlias			AS Character					Optional Default NIL
	ParamType 3		VAR lAliasCpo		AS Logical						Optional Default .T.
	ParamType 4		VAR lInclui			AS Logical						Optional Default .F.

	//Inicializa Variaveis-------------------------------------------------------------------------
	lAlterou	:= .F.
	lMemo		:= .F.
	lGrava		:= .T.

	cCampo		:= U_CXRTrim(Upper(cCampo))

	//Variaveis compartilhadas de mensagens de erro
	cMsgErr		:= IIf(Type('cMsgErr')<>'C','',cMsgErr)
	cCodErr		:= IIf(Type('cCodErr')<>'C','',cCodErr)
	cSoluc		:= IIf(Type('cSoluc')<>'C','',cSoluc)
	cMsg		:= IIf(Type('cMsg')<>'C','',cMsg)

	If cAlias == NIL
		If lAliasCpo
			cAlias	:= FwTabPref(cCampo)
		Else
			cAlias	:= Alias()
		EndIf
	EndIf

	nPosCpo 	:= (cAlias)->(FieldPos(cCampo))

	//O campo nao existe na tabela fisica, busca se é um memo legado
	If nPosCpo == 0
		oArea	:= tCtrlAlias():GetArea({'SX3'},.F.)
		SX3->(dbSetOrder(2)) // X3_CAMPO

		//Verifica se e' um Memo antigo (virtual)
		If SX3->(MsSeek(cCampo))
			If 	U_CXFieldGet('X3_CONTEXT','SX3') == 'V' .And. ;
				U_CXFieldGet('X3_TIPO','SX3') == 'M'

				cIni	:= RTrim(U_CXFieldGet('X3_RELACAO','SX3'))
				nPosIni	:= At('->',cIni)+1
				nPosFim	:= At(',',Right(cIni,len(cIni)-nPosIni))
				If nPosIni > 0 .And. nPosFim > 4
					cCpoMemo	:= SubStr(cIni,nPosIni+1,nPosFim-1)
					dbSelectArea(cAlias)

					MSMM((cAlias)->(FieldGet(FieldPos(cCpoMemo))),,,uConteudo,1,,,cAlias,cCpoMemo) //Grava observacao
					lAlterou	:= .T.
					lMemo		:= .T.
				Else
					U_CXMsgErro('O campo '+cCampo+' não pode ser escrito.',;
								'INFORME O SETOR DE T.I.',/*lMsg*/,/*oArea*/)
				EndIf
			EndIf
		Else
			U_CXMsgErro('O campo '+cCampo+' não foi localizado no SX3.',;
						'INFORME O SETOR DE T.I.',/*lMsg*/,/*oArea*/)
		EndIf

		oArea:RestArea()		//Restaura area

		If !lMemo
			U_CXMsgErro('O campo '+cCampo+' não foi localizado na tabela '+cAlias+'',;
						'INFORME O SETOR DE T.I.',/*lMsg*/,/*oArea*/)
		EndIf
	EndIf

	If !lMemo

		If lInclui
			lGrava	:= !Empty(uConteudo)
		EndIf

		//+----------------------------------------------------------------------------------------+
		//| Tratamento para campos tipo Data em que o novo conteudo foi passado na forma de string |
		//+----------------------------------------------------------------------------------------+
		If lGrava
			uAtual	:= (cAlias)->( FieldGet(nPosCpo) )
			If 	ValType(uAtual) == 'D' .And. ;
				ValType(uConteudo) == 'C'

				uConteudo	:= StoD(uConteudo)
			EndIf
		EndIf

		//Compatibiliza os tamanhos de campos string
		If !lInclui
			//Compatibiliza com o tamanho da string e campos memo customizados
			If ValType(uConteudo) == 'C'

				cTipo	:= (cAlias)->( DBFieldInfo(nST_TIPO   ,nPosCpo) )

				If cTipo == 'C' //Tb pode ser um memo e neste caso não mexe no tamanho
					nTamCpo		:= (cAlias)->( DBFieldInfo(nST_TAMANHO,nPosCpo) )
					uConteudo	:= PadR(uConteudo,nTamCpo)
				EndIf
			EndIf

			//Se não é inclusão verifica se o conteúdo novo é diferente do gravado
			lGrava	:= .Not. ( uConteudo == uAtual )
		EndIf

		//Grava apenas se o conteudo for diferente
		If lGrava
			(cAlias)->( FieldPut(nPosCpo,uConteudo) ) //Assim ficou um pouco mais rapido
//			&(cAlias+'->'+cCampo)	:= uConteudo
			lAlterou	:= .T.
		EndIf

	EndIf

Return lAlterou
