#INCLUDE "Protheus.ch"
#INCLUDE "RWMake.ch"
#Include "ParmType.ch"
#Include "dbInfo.ch"
#Include "MSObject.ch"
#Include "CXInclude.ch"

//#############################################################################
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Programa  | tCXLog      | Autor | Cirilo Rocha    | Data | 06/03/2018  |##
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Descr.    | Classe utilizada para controlar processos de log customiza-|##
//##|          | dos (ZSC)                                                  |##
//##|          | Migrado do fonte CXLibLog para centralizar melhor os con - |##
//##|          | troles                                                     |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |PROGRAMADOR| MANUTENÇÃO EFETUADA                            |##
//##+----------+-----------+------------------------------------------------+##
//##| 01/08/18 | Cirilo R. | Melhoria para gravar o log em TXT se a tabela  |##
//##|          |           |  ZSC não existir                               |##
//##| 22/03/19 | Cirilo R. | Corrigido bug quando não conseguia abrir a     |##
//##|          |           |  tabela ZSC                                    |##
//##| 23/11/21 | Cirilo R. | Tratamento para gravação forçada de Log em ar- |##
//##|          |           |  quivo quando dentro de uma transação desarma  |##
//##| 14/12/21 | Cirilo R. | Pequena revisão (release 33)                   |##
//##| 16/12/21 | Cirilo R. | Tratamento quando o sistema está em TTSBreak   |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Static nTamProc	:= 40	AS Integer
Static nTamFunc	:= 10	AS Integer
Static nTamTab	:= 03	AS Integer
Static nTamChv	:= 30	AS Integer
//-------------------------------------------------------------------------------------------------
Class tCXLog

	PUBLIC DATA cClassName			AS Character

	PUBLIC DATA bTimbreHR			AS CodeBlock
	PUBLIC DATA lJob				AS Logical

	//Variaveis internas
	HIDE DATA nRecZSC				AS Numeric
	HIDE DATA cChvZSC				AS Character
	HIDE DATA cTabZSC				AS Character
	HIDE DATA cNomArq				AS Character
			
	HIDE DATA cUsrID	   			AS Character
	HIDE DATA cNmProc	   			AS Character
	HIDE DATA cFuncao	   			AS Character
	HIDE DATA nRecTab	   			AS Numeric
	HIDE DATA cTabela	   			AS Character
	HIDE DATA cChvTab	   			AS Character
	HIDE DATA lContProc	   			As Logical
	HIDE DATA cPreLog				AS Character
	HIDE DATA cLogProc				AS Character
	HIDE DATA dDataIni				AS Date
	HIDE DATA cHoraIni				AS Character

	//---------------------------------------------------------------------------------------------
	
	PUBLIC METHOD New() Constructor
	PUBLIC METHOD FimLog()
	PUBLIC METHOD GravaLog()
	PUBLIC METHOD ClassName()		AS Character 
	
	PRIVATE METHOD ProcMsg()		AS Character
	PRIVATE METHOD AbreTab()		AS Logical
	PRIVATE METHOD PosTab()			AS Logical
	PRIVATE METHOD GetNomeArq()

EndClass

//#############################################################################
//##+----------+----------------+-------+--------------+------+-------------+##
//##|Programa  | New(Construtor)| Autor | Cirilo Rocha | Data | 06/03/2018  |##
//##+----------+----------------+-------+--------------+------+-------------+##
//##|Descr.    | Função responsável por inicializar o regitro de log do     |##
//##|          | sistema                                                    |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |PROGRAMADOR| MANUTENÇÃO EFETUADA                            |##
//##+----------+-----------+------------------------------------------------+##
//##| 05/03/18 | Cirilo R. | Criado processo para appendar ao log existente |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Method New(	cNmProc		,;	//01 Nome do processo
			cFuncao		,;	//02 Função responsavel (filtro) (def FunName())
			cTabela		,;	//03 Tabela (filtro) (def '***')
			nRecTab		,;	//04 Recno da tabela (filtro) (def -1)
			cChvTab		,;	//05 Chave da tabela (filtro) (def '')
			cMsg		,;	//06 Mensagem inicial (def '')
			lContProc	;	//07 Continua processamento? (def .F.)
						)	Class tCXLog

	//Declaração de variaveis----------------------------------------------------------------------
	Local lInclui		AS Logical
	Local lExistZSC		AS Logical
	Local oArea         AS Object

	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR cNmProc	 	  		AS Character
	ParamType 1		VAR cFuncao	  	  		AS Character			Optional Default Alltrim(FunName())
	ParamType 2		VAR cTabela	  	  		AS Character			Optional Default '***'
	ParamType 3		VAR nRecTab	  	  		AS Numeric				Optional Default -1
	ParamType 4		VAR cChvTab	  	  		AS Character			Optional Default ''
	ParamType 5		VAR cMsg	  	  		AS Character			Optional Default ''
	ParamType 6		VAR lContProc  	  		AS Logical				Optional Default .F.

	//Inicializa variaveis internas--------------------------------------------
	oArea			:=	tCtrlAlias():GetArea()
	lExistZSC		:= ::AbreTab() //TCCanOpen(RetSqlName('ZSC')) //Verifica se a tabela de log existe

	::cClassName	:= 'tCXLog'
	::bTimbreHR		:= {|| DtoC(Date())+'-'+Time()+' '+Replicate('#',30) }
	::cLogProc		:= ''
	
	If Type('lJob') == 'L'
		::lJob	:= lJob
	Else
		::lJob	:= U_CXRotAuto() //IsBlind()	//Funcao executada sem interface (JOB/Server)
	EndIf

	//Guardos estas informacoes podem ser necessarias
	If Type('__cUserID') == 'C'
		::cUsrID	:= __cUserID
	Else
		::cUsrID	:= 'XXXXXX'
	EndIf
	::cNmProc	:= cNmProc
	::cFuncao	:= cFuncao
	::cTabela	:= cTabela
	::cChvTab	:= cChvTab
	::nRecTab	:= nRecTab
	::lContProc	:= lContProc
	::dDataIni	:= Date()
	::cHoraIni	:= Left(Time(),5)

	//Controle de erros
//	If Type('cFilAnt') <> 'C'
//		cFilAnt	:= 'XX'
//	EndIf
//	If Type('cEmpAnt') <> 'C'
//		cEmpAnt	:= 'XX'
//	EndIf
//	If Type('__cUserID') <> 'C'
//		__cUserID	:= 'XXXXXX'
//	EndIf
//	If Type('cUserName') <> 'C'
//		cUserName	:= 'ERRO USR'
//	EndIf

	//Continua log gravado anteriormente?
	If 	::lContProc

		If lExistZSC
//			nTamFunc	:= TamSX3('ZSC_FUNCAO')[1]
//			nTamTab		:= TamSX3('ZSC_TABELA')[1]
//			nTamChv		:= TamSX3('ZSC_CHAVE')[1]
			nTamProc	:= Len(ZSC->ZSC_NMPROC)
			nTamFunc	:= Len(ZSC->ZSC_FUNCAO)
			nTamTab		:= Len(ZSC->ZSC_TABELA)
			nTamChv		:= Len(ZSC->ZSC_CHAVE)
//		Else
//			nTamFunc	:= 10
//			nTamTab		:= 3
//			nTamChv		:= 30
		EndIf

		::cNmProc	:= PadR(::cNmProc,nTamProc)
		::cFuncao	:= PadR(::cFuncao,nTamFunc)
		::cTabela	:= PadR(::cTabela,nTamTab)
		::cChvTab	:= PadR(::cChvTab,nTamChv)

		If lExistZSC
			If 	::nRecTab <> -1 .And. ;
				::nRecTab > 0

				ZSC->(U_CXSetOrd(1)) //ZSC_FILIAL+ZSC_FUNCAO+ZSC_TABELA+ZSC_RECNO+ZSC_DTINI+ZSC_HRINI
				ZSC->(dbSeek(FWxFilial('ZSC')+::cFuncao+::cTabela+Str(::nRecTab, 16, 0)))
				lInclui	:= ZSC->(!Found())
			ElseIf .Not. Empty(cChvTab)
				ZSC->(U_CXSetOrd(2)) //ZSC_FILIAL+ZSC_FUNCAO+ZSC_TABELA+ZSC_CHAVE
				ZSC->(dbSeek(FWxFilial('ZSC')+::cFuncao+::cTabela+::cChvTab))
				lInclui	:= ZSC->(!Found())
			EndIf
			//Preciso setar corretamente os dados originais já que é continuação e o registro já existe!
			If .Not. lInclui
				::dDataIni	:= ZSC->ZSC_DTINI
				::cHoraIni	:= RTrim(ZSC->ZSC_HRINI)
				::cUsrID	:= RTrim(ZSC->ZSC_USUARI)
			EndIf
		EndIf
	Else
		lInclui	:= .T.
	EndIf
	
//	::cNomArq	:= 	Transform(DtoS(Date()),"@R 9999-99-99")+'_'+StrTran(Time(),':',';')+;
//					' Func '+Alltrim(::cFuncao)+' - '+cEmpAnt+'-'+cFilAnt+' - USR '+;
//					__cUserID + ' - ' + cUserName + ;
//					' - TAB '+::cTabela+' - '+RTrim(::cChvTab)+' - '+RTrim(Str(::nRecTab, 16, 0))+'.TXT'
//					
//	::cNomArq	:= U_CXPrcFileNm(::cNomArq) //Pre-processo o nome do arquivo para nao ocorrem erros 

	::GetNomeArq()
	
	::cPreLog	:= 	'Início processamento '+DtoC(::dDataIni)+' - '+::cHoraIni+CRLF+;
					'Proc: '+::cNmProc+CRLF+;
					'Usr: '+::cUsrID+CRLF+;
					'Função: '+::cFuncao+CRLF+;
					'Tab: '+::cTabela+CRLF+;
					'Recno: '+LTrim(Str(::nRecTab))+CRLF+;
					'Chave: '+::cChvTab+CRLF+;
					'Msg: '
	
	//Nesta situação não é possível efetuar uma nova gravação antes de encerrar as transações pendentes senão dá erro log
	If FwInTTSBreak() //Sistema em TTS Break? desarmou a transação?
		U_CXConOut(	'##### ERRO SISTEMA EM TTSBREAK!!!! #####'+CRLF+;
					'O log da operação será gravado em arquivo ao invés da tabela ZSC.'+CRLF+;
					::cPreLog)
		lExistZSC	:= .F.
	EndIf
	
	If lExistZSC
		RecLock('ZSC',lInclui)
			ZSC->ZSC_FILIAL	:= FWxFilial('ZSC')
			ZSC->ZSC_NMPROC	:= ::cNmProc
			ZSC->ZSC_USUARI	:= ::cUsrID
			ZSC->ZSC_FUNCAO	:= ::cFuncao
			ZSC->ZSC_TABELA	:= ::cTabela
			ZSC->ZSC_RECNO	:= ::nRecTab
			ZSC->ZSC_CHAVE	:= ::cChvTab
			ZSC->ZSC_SUCESS	:= ''
			//Adiciona timbre de hora do evento
			If 	.Not. lInclui .And. ;
				.Not. Empty(ZSC->ZSC_MSG)

				cMsg	:= 	ZSC->ZSC_MSG+CRLF+;
							eVal(::bTimbreHR)+CRLF+;
							cMsg
			EndIf
			::cLogProc	:= ::cPreLog+cMsg	//Feito assim para buscar o registro gravado também!
			If .Not. Empty(cMsg)
				ZSC->ZSC_MSG	:= ::ProcMsg(cMsg)
			EndIf
			If lInclui
				ZSC->ZSC_DTINI	:= ::dDataIni
				ZSC->ZSC_HRINI	:= ::cHoraIni
			EndIf
		ZSC->(MsUnLock())

		::nRecZSC	:= ZSC->(Recno())
	Else
		::cLogProc	:= ::cPreLog+cMsg
		If U_CXGravaLog(::cNomArq	,;	//01
						::cLogProc	,;	//02
						!::lJob		)	//03
			//Limpo o buffer se já gravou no arquivo
			::cLogProc	:= ''
		EndIf
	EndIf

	oArea:RestArea()		//Restaura area

Return Self

//#############################################################################
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Programa  | GravaLog    | Autor | Cirilo Rocha    | Data | 26/04/2021  |##
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Descr.    | Função responsável por gravar o log                        |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |PROGRAMADOR| MANUTENÇÃO EFETUADA                            |##
//##+----------+-----------+------------------------------------------------+##
//##| 10/06/19 | Cirilo R. | Correção na gravação do log                    |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Method GravaLog(nRecTab	,;	//01 Recno da tabela (filtro) (def -1)
				cChvTab	,;	//02 Chave da tabela (filtro) (def '')
				cMsg	,;	//03 Mensagem a ser gravada (def '')
				lDtHr	;	//04 Se adiciona o timbre de hora a mensagem (def .F.)
						)	Class tCXLog

	//Declaração de variaveis----------------------------------------------------------------------
	//Local lPos		AS Logical
	Local oArea         AS Object

	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR nRecTab		  	  	AS Numeric			Optional Default -1
	ParamType 1		VAR cChvTab		  	  	AS Character		Optional Default ''
	ParamType 2		VAR cMsg		  	  	AS Character		Optional Default ''
	ParamType 3		VAR lDtHr		  	  	AS Logical			Optional Default .F.

	//---------------------------------------------------------------------------------------------
	oArea		:=	tCtrlAlias():GetArea()

	If .Not. Empty(cMsg)
		cMsg	:= ::ProcMsg(cMsg)
		If lDtHr
			cMsg	:= eVal(::bTimbreHR)+cMsg
		EndIf
	EndIf

	//Verifica se a tabela de log existe e posiciona
	//lPos	:= .F.
	//If 	::AbreTab() .And. ;
	//	::nRecZSC > 0 .And. ;
	//	::nRecZSC <= ZSC->(LastRec())
	//
	//	ZSC->(dbGoTo(::nRecZSC))
	//	If 	ZSC->(!EOF())
	//		lPos	:= .T.
	//	EndIf
	//EndIf
	
	//If 	lPos .And. ;
	If 	::PosTab() .And. ;
		RecLock('ZSC',.F.)
			ZSC->ZSC_DTFIM	:= Date()
			ZSC->ZSC_HRFIM	:= Left(Time(),5)

			If nRecTab > 0
				ZSC->ZSC_RECNO	:= nRecTab
			EndIf
			If .Not. Empty(cChvTab)
				ZSC->ZSC_CHAVE	:= cChvTab
			EndIf

			If .Not. Empty(cMsg)
				cMsg			:= U_CXConcTxt(ZSC->ZSC_MSG,cMsg,CRLF)
				ZSC->ZSC_MSG	:= ::ProcMsg(cMsg)
				::cLogProc		:= ::cPreLog+cMsg	//Feito assim para buscar o registro gravado também!
			EndIf
		ZSC->(MsUnLock())
	Else
		::GetNomeArq()
		
		::cLogProc	:= U_CXConcTxt(::cLogProc,cMsg,CRLF+CRLF+Replicate('#',70)+CRLF+CRLF)
		If U_CXGravaLog(::cNomArq	,;	//01
						::cLogProc	,;	//02
						!::lJob		)	//03
			//Limpo o buffer se já gravou no arquivo
			::cLogProc	:= ''
		EndIf
	EndIf

	oArea:RestArea()		//Restaura area

Return

//#############################################################################
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Programa  | FimLog      | Autor | Cirilo Rocha    | Data | 06/03/2018  |##
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Descr.    | Função responsavel por finalizar a gravação do log         |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |PROGRAMADOR| MANUTENÇÃO EFETUADA                            |##
//##+----------+-----------+------------------------------------------------+##
//##| 10/06/19 | Cirilo R. | Correção na gravação do log                    |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Method FimLog(	lSucess	,;	//01 Indica se a execução ja terminou com sucesso (def .F.)
				nRecTab	,;	//02 Recno da tabela (filtro) (def -1)
				cChvTab	,;	//03 Chave da tabela (filtro) (def '')
				cMsg	,;	//04 Mensagem a ser gravada (def '')
				lDtHr	;	//05 Se adiciona o timbre de hora a mensagem (def .F.)
						)	Class tCXLog

	//Declaração de variaveis----------------------------------------------------------------------
	//Local lPos		AS Logical
	Local oArea         AS Object

	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR lSucess		  	  		AS Logical				Optional Default .F.
	ParamType 1		VAR nRecTab		  	  		AS Numeric				Optional Default -1
	ParamType 2		VAR cChvTab		  	  		AS Character			Optional Default ''
	ParamType 3		VAR cMsg		  	  		AS Character			Optional Default ''
	ParamType 4		VAR lDtHr		  	  		AS Logical				Optional Default .F.

	//---------------------------------------------------------------------------------------------
	oArea		:=	tCtrlAlias():GetArea()

	If .Not. Empty(cMsg)
		cMsg	:= ::ProcMsg(cMsg)
		If lDtHr
			cMsg	:= eVal(::bTimbreHR)+cMsg
		EndIf
	EndIf

	//Verifica se a tabela de log existe
	//If TCCanOpen(RetSqlName('ZSC'))
	//lPos	:= .F.
	//If 	::AbreTab() .And. ;
	//	::nRecZSC > 0 .And. ;
	//	::nRecZSC <= ZSC->(LastRec())
	//
	//	ZSC->(dbGoTo(::nRecZSC))
	//	If 	ZSC->(!EOF())
	//		lPos	:= .T.
	//	EndIf
	//EndIf
	
	//If 	lPos .And. ;
	If	::PosTab() .And. ;
		RecLock('ZSC',.F.)
			ZSC->ZSC_DTFIM	:= Date()
			ZSC->ZSC_HRFIM	:= Left(Time(),5)

			If nRecTab > 0
				ZSC->ZSC_RECNO	:= nRecTab
			EndIf
			If .Not. Empty(cChvTab)
				ZSC->ZSC_CHAVE	:= cChvTab
			EndIf
			If lSucess
				ZSC->ZSC_SUCESS	:= 'S'
			EndIf
			If .Not. Empty(cMsg)
				cMsg			:= U_CXConcTxt(ZSC->ZSC_MSG,cMsg,CRLF)
				ZSC->ZSC_MSG	:= ::ProcMsg(cMsg)
				::cLogProc		:= ::cPreLog+cMsg	//Feito assim para buscar o registro gravado também!
			EndIf
		ZSC->(MsUnLock())
	Else
//		If 	.Not. (	::cNomArq <> NIL .And. ;
//					ValType(::cNomArq) == 'C' .And. ;
//					File(::cNomArq) )
//		If ::cNomArq == NIL
//			//Controle de erros
//			If Type('cFilAnt') <> 'C'
//				cFilAnt	:= 'XX'
//			EndIf
//			If Type('cEmpAnt') <> 'C'
//				cEmpAnt	:= 'XX'
//			EndIf
//			If Type('__cUserID') <> 'C'
//				__cUserID	:= 'XXXXXX'
//			EndIf
//			If Type('cUserName') <> 'C'
//				cUserName	:= 'ERRO USR'
//			EndIf
//			
//			::cNomArq	:= 	Transform(DtoS(Date()),"@R 9999-99-99")+'_'+StrTran(Time(),':',';')+;
//							' Func '+'tCXLog'+' - '+cEmpAnt+'-'+cFilAnt+' - USR '+;
//							__cUserID + ' - ' + cUserName + ;
//							' - TAB '+::cTabela+' - '
//			
//			If 	cChvTab <> NIL .And. ;
//				.Not. Empty(cChvTab)
//				::cNomArq	+= RTrim(cChvTab)+' - ' 
//			ElseIf .Not. Empty(::cChvTab)
//				::cNomArq	+= RTrim(::cChvTab)+' - '
//			EndIf
//
//			If 	nRecTab <> NIL .And. ;
//				nRecTab > 0
//				::cNomArq	+= RTrim(Str(nRecTab, 16, 0))
//			Else
//				::cNomArq	+= RTrim(Str(::nRecTab, 16, 0))
//			EndIf
//			::cNomArq	+= '.TXT'
//			
//			::cNomArq	:= U_CXPrcFileNm(::cNomArq) //Pre-processo o nome do arquivo para nao ocorrem erros
//		EndIf
		
		::GetNomeArq()
		
		If lSucess
			cMsg	+= CRLF+'PROCESSO CONCLUÍDO COM SUCESSO'
		Else
			cMsg	+= CRLF+'PROCESSO COM ERRO'
		EndIf
		::cLogProc	:= U_CXConcTxt(::cLogProc,cMsg,CRLF+CRLF+Replicate('#',70)+CRLF+CRLF)
		If U_CXGravaLog(::cNomArq	,;	//01
						::cLogProc	,;	//02
						!::lJob		)	//03
			//Limpo o buffer se já gravou no arquivo
			::cLogProc	:= ''
		EndIf
	EndIf

	oArea:RestArea()		//Restaura area

Return

//#############################################################################
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Programa  | ClassName   | Autor | Cirilo Rocha    | Data | 01/12/2015  |##
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Descr.    | Metodo para retornar o nome da classe atual                |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |PROGRAMADOR| MANUTENÇÃO EFETUADA                            |##
//##+----------+-----------+------------------------------------------------+##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Method ClassName()	Class tCXLog

Return ::cClassName

//#############################################################################
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Programa  | ProcMsg     | Autor | Cirilo Rocha    | Data |   /  /      |##
//##+----------+-------------+-------+-----------------+------+-------------+##
//##|Descr.    | Faz um pré-processamento na mensagem alterando <br> por    |##
//##|          |  quebra de linha                                           |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |PROGRAMADOR| MANUTENÇÃO EFETUADA                            |##
//##+----------+-----------+------------------------------------------------+##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Method ProcMsg(	cMsg	;	//01
						) Class tCXLog

	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR cMsg		AS Character
	
	//---------------------------------------------------------------------------------------------
	cMsg	:= StrTran(cMsg,'<br>',CRLF)
	cMsg	:= StrTran(cMsg,'<BR>',CRLF)
	cMsg	:= StrTran(cMsg,'<Br>',CRLF)
	cMsg	:= StrTran(cMsg,'<bR>',CRLF)

Return cMsg

//#############################################################################
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Programa  | AbreTab  | Autor | Cirilo Rocha       | Data | 20/09/2018  |##
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Descrição | Função para abrir as tabelas necessarias, porque os proces-|##
//##|          | sos as vezes derrubam o ambiente isso evita erros.         |##
//##+----------+----------+-------------------------------------------------+##
//##| DATA     | ANALISTA | MANUTENÇÃO EFETUADA                             |##
//##+----------+----------+-------------------------------------------------+##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##+----------+----------+-------------------------------------------------+##
//#############################################################################
Method AbreTab()	Class tCXLog
	
	//Declaração de variaveis----------------------------------------------------------------------
	Local lRet		AS Logical
	Local cAlias	AS Character

	//---------------------------------------------------------------------------------------------
	//Verifico se a tabela atual eh diferente da tabela original
	If .Not. Empty(::cTabZSC) .And. ;
		Select("ZSC") > 0 .And. ;
		ZSC->(DBInfo(DBI_FULLPATH)) <> ::cTabZSC
		
		ZSC->(dbCloseArea()) //Fecha a tabela
	EndIf
	
	//Ja aberta
	lRet	:= .F.
	If 	Select("ZSC") > 0
		lRet	:= .T.
	//Tenta abrir
	Else
		
		If	Empty(::cTabZSC) .And. ;
			Type('cEmpAnt') == 'C' .And. ; 	//Verifica se o ambiente possui os 
			Type('cFilAnt') == 'C' .And. ;	//dados necessarios para abrir a tabela
			Select("SX2") <> 0
		
			::cTabZSC	:= RetSqlName('ZSC')
		EndIf
		
		If .Not. Empty(::cTabZSC)	//Se a tabela existe no SX2

			//Feito assim porque as vezes o ambiente não está carregado por algum erro!
			If 	TCCanOpen(::cTabZSC) .And. ;		//verifica se a tabela existe no sql ou indice existe
				TCCanOpen(::cTabZSC,::cTabZSC+'1') .And. ;
				TCCanOpen(::cTabZSC,::cTabZSC+'2')
				
				cAlias	:= Alias()		//Salvo o alias atual
				
				dbUseArea(.T.,__cRDD,::cTabZSC,"ZSC", .T. , .F. )
				dbSetIndex(::cTabZSC+'1') //Abre indices
				dbSetIndex(::cTabZSC+'2') //Abre indices
				
				If 	ValType(cAlias) == 'C' .And. ;
					.Not. Empty(cAlias)
					
					DbSelectArea(cAlias)	//Restaura o alias
				EndIf
			ElseIf Select("SX2") > 0
				ZSC->(dbSetOrder(1))
			EndIf
			
			lRet	:= .T.
		EndIf
	EndIf

Return lRet

//#############################################################################
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Programa  | PosTab   | Autor | Cirilo Rocha       | Data | 23/11/2021  |##
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Descr.    | Função para abrir as tabelas necessarias e posicionar      |##
//##+----------+----------+-------------------------------------------------+##
//##| DATA     | ANALISTA | MANUTENÇÃO EFETUADA                             |##
//##+----------+----------+-------------------------------------------------+##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##+----------+----------+-------------------------------------------------+##
//#############################################################################
Method PosTab()	Class tCXLog
	
	//Declaração de variaveis----------------------------------------------------------------------
	Local lPos		AS Logical
	
	//---------------------------------------------------------------------------------------------
	lPos	:= .F.
	If 	::AbreTab() .And. ;
		::nRecZSC > 0 .And. ;
		::nRecZSC <= ZSC->(LastRec())

		ZSC->(dbGoTo(::nRecZSC))
		If 	ZSC->(!EOF()) .And. ;
			RTrim(ZSC->ZSC_NMPROC)	== RTrim(::cNmProc)	.And. ;	//Confiro novamente se a chave do registro bate!
			RTrim(ZSC->ZSC_USUARI)	== RTrim(::cUsrID)	.And. ; //para os casos do disarmtransaction e que outras
			RTrim(ZSC->ZSC_FUNCAO)	== RTrim(::cFuncao)	.And. ; //rotinas já fizeram uma gravação com este número
			RTrim(ZSC->ZSC_TABELA)	== RTrim(::cTabela)	.And. ;
			ZSC->ZSC_DTINI  == ::dDataIni	.And. ;
			RTrim(ZSC->ZSC_HRINI)	== RTrim(::cHoraIni)

			//Nesta situação não é possível efetuar uma nova gravação antes de encerrar as transações pendentes senão dá erro log
			If FwInTTSBreak() //Sistema em TTS Break? desarmou a transação?
				::GetNomeArq()	//Obtem nome do arquivo
				U_CXConOut(	'##### ERRO SISTEMA EM TTSBREAK!!!! #####'+CRLF+;
							'O log da operação será gravado no arquivo '+::cNomArq+' ao invés da tabela ZSC.'+CRLF+;
							::cPreLog)
				lPos	:= .F.
			Else
				lPos	:= .T.
			EndIf			
		EndIf
	EndIf

Return lPos

//#############################################################################
//##+----------+------------+-------+------------------+------+-------------+##
//##|Programa  | GetNomeArq | Autor | Cirilo Rocha     | Data |   /  /      |##
//##+----------+------------+-------+------------------+------+-------------+##
//##|Descrição | Função para gerar o nome do arquivo log de legado          |##
//##+----------+----------+-------------------------------------------------+##
//##| DATA     | ANALISTA | MANUTENÇÃO EFETUADA                             |##
//##+----------+----------+-------------------------------------------------+##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##+----------+----------+-------------------------------------------------+##
//#############################################################################
Method GetNomeArq()	Class tCXLog

	//If ValType(::cNomArq) <> 'C'
	If Empty(::cNomArq)
		//Controle de erros caso o ambiente não esteja carregado!
		If Type('cFilAnt') <> 'C'
			Private cFilAnt	:= 'XX'
		EndIf
		If Type('cEmpAnt') <> 'C'
			Private cEmpAnt	:= 'XX'
		EndIf
		If Type('__cUserID') <> 'C'
			Private __cUserID	:= 'XXXXXX'
		EndIf
		If Type('cUserName') <> 'C'
			Private cUserName	:= 'ERRO USR'
		EndIf

		::cNomArq	:= 	U_CXPrcFileNm(Transform(DtoS(Date()),"@R 9999-99-99")+'_'+StrTran(Time(),':',';')+;
						' Func '+Alltrim(::cFuncao)+' - '+cEmpAnt+'-'+cFilAnt+' - USR '+;
						__cUserID + ' - ' + cUserName + ;
						' - TAB '+::cTabela+' - '+RTrim(::cChvTab)+' - '+RTrim(Str(::nRecTab, 16, 0))+'.TXT')
	EndIf

Return
