#INCLUDE 'RWMake.ch'
#INCLUDE 'Totvs.ch'
#INCLUDE 'ParmType.ch'
#INCLUDE 'CXInclude.ch'
#INCLUDE 'TWsdlManager.ch'

//#############################################################################
//##+==========+============+=======+==================+======+=============+##
//##|Programa  | CXBuscaCEP | Autor | Cirilo Rocha     | Data | 10/06/2021  |##
//##+==========+============+=======+==================+======+=============+##
//##|Desc.     | Função para consultar via WS um CEP nos Correios, devolve  |##
//##|          | o endereço completo                                        |##
//##+==========+==========+=================================================+##
//##| DATA     | ANALISTA | MANUTENÇÃO EFETUADA                             |##
//##+==========+==========+=================================================+##
//##| 28/06/21 | Cirilo R.| Melhoria para também buscar o código do munic.  |##
//##| 06/01/22 | Cirilo R.| Pequena revisão no fonte                        |##
//##| 11/02/22 | Cirilo R.| Opção de buscar o WSDL também pela URL se não   |##
//##|          |          |  encontrar o arquivo                            |##
//##| 06/04/22 | Cirilo R.| Correção do erro na consulta                    |##
//##|          |          | https://centraldeatendimento.totvs.com/hc/pt-br/|##
//##|          |          |  articles/5151712642839                         |##
//##| 09/06/22 | Cirilo R.| Melhoria para utilizar a classe tXMLManager     |##
//##| 07/03/23 | Cirilo R.| Melhoria para utilizar a classe tCXWSDL         |##
//##|          |          | Grande revisão no fonte                         |##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##+==========+==========+=================================================+##
//#############################################################################
//---------------------------------------------------------------------------------------------------------------------//
//Exemplo de Gatilho                                                                                                   //
// Origem  Destino     Regra                                                                   Condição                //
// A1_CEP  A1_EST      IIF(ValType(U_CXBuscaCEP(M->A1_CEP,.T.,.T.))=='A',VAR_IXB[1],M->A1_EST) .Not. Empty(M->A1_CEP)  //
// A1_CEP  A1_COD_MUN  VAR_IXB[6]                                                              ValType(VAR_IXB)=='A'   //
// A1_CEP  A1_END      FwNoAccent(VAR_IXB[3])                                                  ValType(VAR_IXB)=='A'   //
// A1_CEP  A1_BAIRRO   FwNoAccent(VAR_IXB[4])                                                  ValType(VAR_IXB)=='A'   //
// A1_CEP  A1_MUN      FwNoAccent(VAR_IXB[2])  (PODE NÃO SER NECESSÁRIO)                       ValType(VAR_IXB)=='A'   //
//---------------------------------------------------------------------------------------------------------------------//
// É OPCIONAL, MAS É ALTAMENTE RECOMENDÁVEL PARA MELHOR PERFORMANCE SALVAR O ARQUIVO WSDL DO LINK NA PASTA :           //
//  \SYSTEM\_CUSTOMIZACOES\CORREIOS\AtendeCliente.xml                                                                  //
//---------------------------------------------------------------------------------------------------------------------//
Static cArqWSDL	:= U_CXArqCst('AtendeCliente.xml','CORREIOS',/*cFilBsc*/)		AS Character
Static cURL		:= GetMV('MX_URLCORR',.F.,'https://apps.correios.com.br/SigepMasterJPA/AtendeClienteService/AtendeCliente?wsdl')
//-------------------------------------------------------------------------------------------------
User Function CXBuscaCEP(	cCEP	,;	//01 cCEP
							lMsg	,;	//02 lMsg
							lGat	);	//03 lGat
								AS Array
	
	//Declaração de Variáveis----------------------------------------------------------------------
	Local aRet			AS Array
	Local aFunDesc		AS Array
	Local nX			AS Integer
	Local bBusca		AS CodeBlock
	
	//Parâmetros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR cCEP		AS Character			//Optional Default &(ReadVar())
	ParamType 1		VAR lMsg		AS Logical				Optional Default .Not. U_CXRotAuto()
	ParamType 2		VAR lGat		AS Logical				Optional Default .F.

	//Inicializa Variaveis-------------------------------------------------------------------------
	bBusca	:= {|| aRet	:= BuscaCEP(cCEP,lMsg) }

	If lGat
		VAR_IXB	:= NIL		//Reseto a variável compartilhada

		If U_CXRotAuto()	//Não executa nas rotinas automáticas
			Return NIL
		EndIf

		aFunDesc	:= StrTokArr2(FWSuperGetMV('MX_BSCCEPF',.f.,'M030APICGC,M020APICGC'),',',.F.)	//Funções desconsideradas no prcessamento por causar erros
		For nX := 1 to Len(aFunDesc)
			If FWIsInCallStack(aFunDesc[nX])	//Estas funções não devem executar
				Return NIL
			EndIf
		Next

		cCEP	:= U_CXSoNumeros(cCEP)
		If .Not. Empty(cCEP) .And. ;
			Val(cCEP) > 0
			FWMsgRun(/*oSay*/,bBusca,U_CXTxtMsg()+'Consultando CEP','Aguarde...')
		EndIf

		If ValType(aRet) <> 'A'
			//aRet	:= U_CXArray('',6)
		Else
			VAR_IXB	:= aClone(aRet)	//Guardo nesta variável para utilizar nos gatilhos
		EndIf
	Else
		eVal(bBusca)
	EndIf

Return aRet

//-------------------------------------------------------------------------------------------------
Static Function BuscaCEP(	cCEP	,;	//01
							lMsg	);	//02
								AS Array

	//Declaração de Variáveis----------------------------------------------------------------------
	Local aRet			AS Array
	Local lRet			AS Logical
//	Local cXml			AS Character
	Local cXMLRet		AS Character
	Local cMun			AS Character
	Local oArea			AS Object
	Local oXml			AS Object
	Local oWsdl			AS Object
	
	//Incialização de Variáveis--------------------------------------------------------------------
	lRet	:= .T.
	oArea	:= tCtrlAlias():GetArea({'CC2'})

	//Variaveis compartilhadas de mensagens de erro
	cMsgErr		:= IIf(Type('cMsgErr')<>'C','',cMsgErr)
	cCodErr		:= IIf(Type('cCodErr')<>'C','',cCodErr)
	cSoluc		:= IIf(Type('cSoluc')<>'C','',cSoluc)
	cMsg		:= IIf(Type('cMsg')<>'C','',cMsg)
	
	//---------------------------------------------------------------------------------------------
	// Cria o objeto da classe TWsdlManager
	oWsdl 		:= tCXWSDL():New()
	oWsdl:_lMsg	:= lMsg
	oWsdl:_oWSDL:bNoCheckPeerCert	:= .T.	//Desabilita o check de CAs
	oWsdl:_oWSDL:nTimeout			:= 60	//Timeout no processo de envio
    oWsdl:_oWSDL:lSSLInsecure 		:= .T.
    oWsdl:_oWSDL:lUseNSPrefix 		:= .T.

	//https://tdn.totvs.com/display/tec/Acesso+a+Web+Services+que+exigem+certificados+de+CA
// 	oWsdl:_oWSDL:cSSLCACertFile := U_CXArqCst("CAcorreios.pem",'CORREIOS',/*cFilBsc*/)
//  oWsdl:_oWSDL:cSSLCertFile   := U_CXArqCst("ClientCert.pem",'CORREIOS',/*cFilBsc*/)
//  oWsdl:_oWSDL:cSSLKeyFile    := U_CXArqCst("ClientKey.pem",'CORREIOS',/*cFilBsc*/)
//  oWsdl:_oWSDL:cSSLKeyPwd     := "password" //se necessário

	// Faz o parse de uma URL ou do Arquivo--------------------------------------------------------
	If U_CXFile(cArqWSDL,.F.,.T.)
		lRet		:= oWsdl:ParseFile( cArqWSDL )
	Else
		lRet		:= oWsdl:ParseURL( cURL )	//Busca pela URL
	EndIf
	
	//Erro de parser
	If .Not. lRet
		Return NIL
	EndIf
	
	If .Not. oWsdl:Reset()	//Forço a limpeza das variáveis internas para utilização
		Return NIL	//Erro no reset
	EndIf

	//Monta e envia mensagem Soap
	cXMLRet	:= oWsdl:CXSendSimpleMsg('consultacep',{{'cep',cCEP}})

	//-------------------------------------------------------------------------------------------//
	//SÓ FUNCIONOU QUANDO SETEI AS INFORMAÇÕES ABAIXO, MESMO EU ALIMENTANDO DIRETAMENTE O XML    //
	//-------------------------------------------------------------------------------------------//

	////Chumbei o XML desta forma porque diretamente pela classe não funcionou
	//cXml	:=	'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" '+;
	//			'xmlns:cli="http://cliente.bean.master.sigep.bsb.correios.com.br/">'+;
	//				'<soapenv:Header/>'+;
	//				'<soapenv:Body>'+;
	//					'<cli:consultaCEP>'+;
	//						'<cep>'+cCEP+'</cep>'+;
	//					'</cli:consultaCEP>'+;
	//				'</soapenv:Body>'+;
	//			'</soapenv:Envelope>'
	
	//// Exibe a mensagem que será enviada
	//U_CXConOut('#### MENSAGEM SOAP PARA ENVIO ####',,.T.)
	//U_CXConOut(U_CXFormatXML(cXML))

	// Envia a mensagem SOAP ao servidor
	lRet := oWsdl:SendSoapMsg()
	If .Not. lRet
		If 'CEP NAO ENCONTRADO' $ FwNoAccent(Upper(oWsdl:_oWSDL:cError:cError))
			U_CXMsgErro('CEP '+cCEP+' não encontrado nos Correios.',/*cSolucao*/,lMsg,/*oArea*/,,,,,.T.)
		Else
			U_CXMsgErro(oWsdl:_cError,;
						'INFORME O SETOR DE T.I.',lMsg,/*oArea*/,,,,,.T.)
		EndIf
		Return NIL
	Else	//-------------------------------------------------------------------------------------
		cXMLRet	:= oWsdl:GetSoapResponse()
		U_CXConOut('#### XML DA RESPOSTA DO SOAP ####',,.T.)
		U_CXConOut(U_CXFormatXML(cXMLRet))
		
		oXml	:= tCXXMLManager():New()
		If .Not. oXML:Parse(cXMLRet)
			U_CXMsgErro('Falha ao consultar XML de resposta : '+oXML:Error()+' / '+oXML:Warning(),;
						'INFORME O SETOR DE T.I.',lMsg,/*oArea*/,,,,,.T.)
			Return NIL
		EndIf

		oXML:CXRegisterNS()
		//oXML:XPathRegisterNsList( oXML:XPathGetRootNsList() )
		//Precisou registrar aqui porque ele vem de forma separada no XML mesmo
		oXML:XPathRegisterNs( "ns2", "http://cliente.bean.master.sigep.bsb.correios.com.br/" )
		
		//Verifica estrutura do XML de retorno
		If 	oXML:CXSetXPath( '/soap:Envelope/soap:Body/ns2:consultaCEPResponse/return' )
			If 	.Not. oXML:XPathHasNode( "/uf" ) .Or. ;
				.Not. oXML:XPathHasNode( "/cidade" )

				U_CXMsgErro('ERRO no retorno dos Correios, faltando campos de retorno.',;
							'INFORME O SETOR DE T.I.',lMsg,/*oArea*/,,,,,.T.)
				Return NIL
			Else
				aRet	:= Array(06)
				aRet[1]	:= oXML:XPathGetNodeValue( "/uf" )
				aRet[2]	:= oXML:XPathGetNodeValue( "/cidade" )
				aRet[3]	:= ''
				aRet[4]	:= ''
				aRet[5]	:= ''
				aRet[6]	:= ''
				
				If oXML:XPathHasNode( "/end" )
					aRet[3]	:= oXML:XPathGetNodeValue( "/end" )
				EndIf

				If oXML:XPathHasNode( "/bairro" )
					aRet[4]	:= oXML:XPathGetNodeValue( "/bairro" )
				EndIf

				If oXML:XPathHasNode( "/complemento2" )
					aRet[5]	:= oXML:XPathGetNodeValue( "/complemento2" )
				EndIf
			
				cMun	:= AllTrim(aRet[2])
				cMun	:= Upper(cMun)
				cMun	:= FwNoAccent(cMun)
				CC2->(dbSetOrder(4)) //CC2_EST+CC2_MUN
				If CC2->(MsSeek(FWxFilial('CC2')+aRet[1]+cMun))
					aRet[6]	:= CC2->CC2_CODMUN
				Else
					U_CXMsgErro('ERRO ao localizar o município '+cMun+'/'+aRet[1]+' na tabela do sistema (CC2).',;
								/*cSoluc*/,lMsg,/*oArea*/,,,.T.)	//Aviso apenas
				EndIf
			EndIf
		Else
			U_CXMsgErro('ERRO no XML de retorno do '+oXML:_xPath+CRLF+;
						'VERIFIQUE SE O CEP É VÁLIDO NOS CORREIOS.',;
						/*cSoluc*/,lMsg,/*oArea*/,,,,,.T.)

			U_CXConOut('XML: ')
			U_CXConOut(U_CXFormatXML(cXMLRet))

			Return NIL
		EndIf
		
	EndIf 

	If ValType(oXml) == 'O'
		oXML:Destroy()
		FwFreeVar(oXml)
		oXml	:= NIL
	EndIf

	If ValType(oWsdl) == 'O'
		oWsdl:Destroy()
		FwFreeVar(oWsdl)
		oWsdl	:= NIL
	EndIf	

	oArea:RestArea()	//Restaura a area
	
Return aRet
