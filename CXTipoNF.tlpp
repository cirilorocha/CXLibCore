#INCLUDE 'RWMake.ch'
#INCLUDE 'Totvs.ch'
#INCLUDE 'ParmType.ch'
#INCLUDE 'CXInclude.ch'

//#############################################################################
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Programa  | CXTipoNF | Autor | Cirilo Rocha       | Data |  29/03/2012 |##
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Desc.     | Funcao para retornar a descricao do tipo da NF             |##
//##|          |                                                            |##
//##|          | Existem 3 retornos possiveis:                              |##
//##|          |  1 = Descricao do tipo (segundo parametro obrigatorio)     |##
//##|          |  2 = Array com as descricoes dos tipos para NF             |##
//##|          |  3 = Array com os tipos de NF validos                      |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |Programador| Manutenção efetuada                            |##
//##+----------+-----------+------------------------------------------------+##
//##| 24/02/16 | Cirilo R. | Pequeno ajuste para retornar vazio se tipo1    |##
//##| 27/01/23 | Cirilo R. | Pequena revisão no fonte                       |##
//##|          |           | Otimização para usar cache Json                |##
//##| 01/02/23 | Cirilo R. | Nova opção 4                                   |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Static jCacheTipo		:= NIL				AS Json
//-------------------------------------------------------------------------------------------------
User Function CXTipoNF(	nTipo	,;	//01 nTipo
						cTipoNF	,;	//02 cTipoNF
						lRetVazio)	//03 lRetVazio

	//Declaracao de variaveis----------------------------------------------------------------------
	Local aTipos		AS Array
	Local aDescTipos	AS Array
	Local uRet			AS Variant
	
	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR nTipo		AS Numeric
	ParamType 1		VAR cTipoNF		AS Character			Optional
	ParamType 2		VAR lRetVazio	AS Logical				Optional Default .T.
	
	//Alimenta o Cache, não achei rotina padrão com esses dados, eles sempre amarram no fonte
	If ValType(jCacheTipo) <> 'J'
		jCacheTipo		:= JsonObject():New()
		jCacheTipo['N']	:= FWI18NLANG("MATA103X","STR0001",0001)					//"Normal"
		jCacheTipo['D']	:= FWI18NLANG("MATA103X","STR0002",0002)					//"Devolucao"
		jCacheTipo['B']	:= FWI18NLANG("MATA103X","STR0003",0003)					//"Beneficiamento"
		jCacheTipo['I']	:= StrTran(FWI18NLANG("MATA103X","STR0004",0004),'  ',' ')	//"Compl. ICMS"
		jCacheTipo['P']	:= StrTran(FWI18NLANG("MATA103X","STR0005",0005),'  ',' ')	//"Compl. IPI"
		jCacheTipo['C']	:= FWI18NLANG("MATA103X","STR0006",0006)					//"Compl. Preco/Frete"
	EndIf

	//Retorna a descricao do tipo passado como parametro
	If nTipo == 1
		
		ParamType 1		VAR cTipoNF		AS Character		//Revalido porque neste caso é obrigatório

		If jCacheTipo:hasProperty(cTipoNF)	//Busca registro no cache
			uRet	:= jCacheTipo[cTipoNF]
		EndIf
	//Retorna o array com as descricoes dos tipos
	ElseIf nTipo == 2
		aDescTipos	:= {}
		aTipos		:= jCacheTipo:GetNames()
		aEval(aTipos,{|x| aAdd(aDescTipos,jCacheTipo[x]) } )
		uRet		:= aDescTipos
	//Retorna o array com os tipos validos
	ElseIf nTipo == 3
		uRet	:= jCacheTipo:GetNames()
	//Retorna array concatenado X=Descricao
	ElseIf nTipo == 4
		aDescTipos	:= {}
		aTipos		:= jCacheTipo:GetNames()
		aEval(aTipos,{|x| aAdd(aDescTipos,x+'='+jCacheTipo[x]) } )
		uRet		:= aDescTipos
	EndIf
	
	If 	ValType(uRet) == 'U' .And. ;
		lRetVazio

		uRet	:= ''
	EndIf

Return uRet
