#INCLUDE "RWMake.ch"
#INCLUDE "Protheus.ch"
#INCLUDE "Totvs.ch"
#Include "ParmType.ch"
#Include "CXInclude.ch"

//#############################################################################
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Programa  | CXCpoRCC | Autor | Cirilo Rocha       | Data | 28/12/2017  |##
//##+----------+----------+-------+--------------------+------+-------------+##
//##|Descricao | Funcao generica para obter os dados das tabelas genericas  |##
//##|          | da folha (RCC)                                             |##
//##+----------+-----------+------------------------------------------------+##
//##|   DATA   |Programador| Manutencao efetuada                            |##
//##+----------+-----------+------------------------------------------------+##
//##| 26/11/18 | Cirilo R. | Revisão no fonte                               |##
//##| 12/10/21 | Cirilo R. | Pequena revisão (release 33)                   |##
//##| 14/12/21 | Cirilo R. | Pequena revisão (release 33)                   |##
//##| 16/03/23 | Cirilo R. | Pequena revisão no fonte                       |##
//##|          |           |                                                |##
//##|          |           |                                                |##
//##+----------+-----------+------------------------------------------------+##
//#############################################################################
Static nSizeFil := FwTamSX3('RCC_FIL')[1] 	AS Numeric	//FWSizeFilial()
Static aCpoTab	:= {} 						AS Array	//Cache de otimizacao

//Posicoes do array aCpoTab
Static nRC_CPO	:= 01	AS Integer
Static nRC_INI	:= 02	AS Integer
Static nRC_TAM	:= 03	AS Integer
Static nRC_TIP	:= 04	AS Integer

Static nRC_TAR	:= 04	AS Integer
//-----------------------------------------------------------------------------
User Function CXCpoRCC(	cCodTab	,;	// 01 Codigo da tabela
						cCpoRet	,;	// 02 Campo para retorno
						cChave	,;	// 03 Chave de busca (def readvar())
						cCpoChv	,; 	// 04 Campo chave para busca (def primeiro campo)
						lMsg	)	// 05 Mostra mensagens de erro (def .T.)

	//Declaracao de variaveis----------------------------------------------------------------------
	Local oArea			AS Object
	Local nPosAtu		AS Numeric
	Local cTpRet		AS Character
	Local nPos			AS Numeric
	Local aCpos			AS Array

	Local nPChv			AS Numeric
	Local nPRet			AS Numeric
	
	Local uRet		:= ''		AS Variant //AS Character,Numeric,Date,Logical	//Campos dicionario
	Local uRetRCC				AS Variant //Character

	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR cCodTab	 		AS Character
	ParamType 1		VAR cCpoRet	 		AS Character
	ParamType 2		VAR cChave	 		AS Character			Optional Default &(ReadVar())
	ParamType 3		VAR cCpoChv	  		AS Character			Optional Default NIL
	ParamType 4		VAR lMsg	  		AS Logical				Optional Default .T.

	//---------------------------------------------------------------------------------------------
	lErro	:= .F.		//Variavel compartilhada de erro

	//Se a chave nao for informada nao precisa prosseguir
	If Empty(cChave)
		Return uRet
	EndIf
	
	oArea	:= tCtrlAlias():GetArea({'RCB','RCC'})

	//Variaveis compartilhadas de mensagens de erro
	cMsgErr		:= IIf(Type('cMsgErr')<>'C','',cMsgErr)
	cCodErr		:= IIf(Type('cCodErr')<>'C','',cCodErr)
	cSoluc		:= IIf(Type('cSoluc')<>'C','',cSoluc)
	cMsg		:= IIf(Type('cMsg')<>'C','',cMsg)

	//---------------------------------------------------------------------------------------------
	cCodTab	:= AllTrim(cCodTab)
	RCB->(dbSetOrder(1)) //RCB_FILIAL+RCB_CODIGO
	If !RCB->(MsSeek(FWxFilial('RCB')+cCodTab))
		lErro	:= .F.
		U_CXMsgErro('Erro ao localizar a tabela '+cCodTab+'.',;
					'INFORME O SETOR DE T.I.',lMsg,oArea)
		Return uRet
	EndIf

	//---------------------------------------------------------------------------------------------

	nPos	:= aScan(aCpoTab,{|x| x[1] == cCodTab})

	If nPos == 0 //Tabela nao carregada, faz a carga

		aAdd(aCpoTab,{ cCodTab , {} })
		nPos	:= len(aCpoTab)
		aCpos	:= @aCpoTab[nPos][2]

		nPosAtu	:= 1

		While 	RCB->(!EOF()) .And. ;
				RCB->RCB_FILIAL == FWxFilial('RCB') .And. ;
				RCB->RCB_CODIGO == cCodTab

			aAdd(aCpos,Array(nRC_TAR))
			aTail(aCpos)[nRC_CPO] := RTrim(RCB->RCB_CAMPOS)
			aTail(aCpos)[nRC_INI] := nPosAtu
			aTail(aCpos)[nRC_TAM] := RCB->RCB_TAMAN
			aTail(aCpos)[nRC_TIP] := RCB->RCB_TIPO

			nPosAtu	+= RCB->RCB_TAMAN
			RCB->(dbSkip())
		EndDo

	EndIf

	//---------------------------------------------------------------------------------------------
	cCpoRet	:= AllTrim(cCpoRet)
	cChave	:= AllTrim(cChave)

	aCpos	:= @aCpoTab[nPos][2]

	nPRet	:= aScan(aCpos, {|x| Upper(x[nRC_CPO]) == Upper(cCpoRet) })

	If cCpoChv == NIL //Default eh o primeiro campo
		nPChv	:= 1
	Else
		cCpoChv	:= AllTrim(cCpoChv)
		nPChv	:= aScan(aCpos, {|x| Upper(x[nRC_CPO]) == Upper(cCpoChv) })
	EndIf

	If nPChv == 0
		lErro	:= .F.
		U_CXMsgErro('Não foi possível localizar o campo Chave '+cCpoChv+' na tabela '+cCodTab+'.',;
					'INFORME O SETOR DE T.I.',lMsg,oArea)
		Return uRet
	ElseIf nPRet == 0
		lErro	:= .F.
		U_CXMsgErro('Não foi possível localizar o campo de Retorno '+cCpoRet+' na tabela '+cCodTab+'.',;
					'INFORME O SETOR DE T.I.',lMsg,oArea)
		Return uRet
	EndIf

	//---------------------------------------------------------------------------------------------

	cTpRet	:= aCpos[nPRet][nRC_TIP]

	//Valores Default
	If cTpRet == 'D'
		uRet	:= CtoD('')
	ElseIf cTpRet == 'N'
		uRet	:= 0
	Else	//Caracter ou default eh caractere
		uRet	:= ''
	EndIf

	//---------------------------------------------------------------------------------------------

	//Busca primeiro pela filial
	uRetRCC	:= BuscaRCC(FWxFilial("SRA")		,; // 01
						cCodTab					,; // 02
						cChave					,; // 03
						aCpos[nPChv][nRC_INI]	,; // 04
						aCpos[nPChv][nRC_TAM]	,; // 05
						aCpos[nPRet][nRC_INI]	,; // 06
						aCpos[nPRet][nRC_TAM]	)  // 07

	//Se nao achar por filial busca pela empresa
	If ValType(uRetRCC) == 'U'
		uRetRCC	:= BuscaRCC(Space(nSizeFil)			,;	// 01
							cCodTab					,;	// 02
							cChave					,;	// 03
							aCpos[nPChv][nRC_INI]	,;	// 04
							aCpos[nPChv][nRC_TAM]	,;	// 05
							aCpos[nPRet][nRC_INI]	,;	// 06
							aCpos[nPRet][nRC_TAM]	)	// 07
	EndIf

	If ValType(uRetRCC) == 'C' 	//Se achou faz a conversao dos tipos de dados corretos
		If cTpRet == 'D'
			uRet	:= StoD(uRetRCC)
		ElseIf cTpRet == 'N'
			uRet	:= Val(uRetRCC)
		Else	//Caracter ou default eh caractere
			uRet	:= AllTrim(uRetRCC)
		EndIf
	EndIf

	oArea:RestArea()		//Restaura area

Return uRet

//-------------------------------------------------------------------------------------------------
Static Function BuscaRCC(	cFilRCC	,;	//01
							cCodTab	,;	//02
							cChave	,;	//03
							nPChv	,;	//04
							nTChv	,;	//05
							nPRet	,;	//06
							nTRet	)	//07

	//Declaracao de variaveis----------------------------------------------------------------------
	Local uRet		AS Variant

	//Parametros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR cFilRCC			AS Character
	ParamType 1		VAR cCodTab			AS Character
	ParamType 2		VAR cChave			AS Character
	ParamType 3		VAR nPChv			AS Numeric
	ParamType 4		VAR nTChv			AS Numeric
	ParamType 5		VAR nPRet			AS Numeric
	ParamType 6		VAR nTRet			AS Numeric
	
	//---------------------------------------------------------------------------------------------
	RCC->(dbSetOrder(1)) //RCC_FILIAL+RCC_CODIGO+RCC_FIL+RCC_CHAVE+RCC_SEQUEN
	RCC->(MsSeek(FWxFilial("RCC")+cCodTab+cFilRCC))
	While 	RCC->(!Eof()) .And. ;
			RCC->RCC_FILIAL == FWxFilial("RCC") .And. ;
			RCC->RCC_CODIGO == cCodTab .And. ;
			RCC->RCC_FIL == cFilRCC

		If Alltrim(Substr(RCC->RCC_CONTEU,nPChv,nTChv)) == cChave //Localiza a chave
			uRet := Substr(RCC->RCC_CONTEU,nPRet,nTRet)
			Exit
		EndIf

		RCC->(dBSkip())
	EndDo

Return uRet
