#INCLUDE 'RWMake.ch'
#INCLUDE 'Totvs.ch'
#INCLUDE 'ParmType.ch'
#INCLUDE 'CXInclude.ch'
#INCLUDE 'TWsdlManager.ch'

//#############################################################################
//##+==========+============+=======+==================+======+=============+##
//##|Programa  | CXBuscaCEP | Autor | Cirilo Rocha     | Data | 10/06/2021  |##
//##+==========+============+=======+==================+======+=============+##
//##|Desc.     | Função para consultar via WS um CEP nos Correios, devolve  |##
//##|          | o endereço completo                                        |##
//##+==========+==========+=================================================+##
//##| DATA     | ANALISTA | MANUTENÇÃO EFETUADA                             |##
//##+==========+==========+=================================================+##
//##| 28/06/21 | Cirilo R.| Melhoria para também buscar o código do munic.  |##
//##| 06/01/22 | Cirilo R.| Pequena revisão no fonte                        |##
//##| 11/02/22 | Cirilo R.| Opção de buscar o WSDL também pela URL se não   |##
//##|          |          |  encontrar o arquivo                            |##
//##| 06/04/22 | Cirilo R.| Correção do erro na consulta                    |##
//##|          |          | https://centraldeatendimento.totvs.com/hc/pt-br/|##
//##|          |          |  articles/5151712642839                         |##
//##| 09/06/22 | Cirilo R.| Melhoria para utilizar a classe tXMLManager     |##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##|          |          |                                                 |##
//##+==========+==========+=================================================+##
//#############################################################################
//---------------------------------------------------------------------------------------------------------------------//
//Exemplo de Gatilho                                                                                                   //
// Origem  Destino     Regra                                                                   Condição                //
// A1_CEP  A1_EST      IIF(ValType(U_CXBuscaCEP(M->A1_CEP,.T.,.T.))=='A',VAR_IXB[1],M->A1_EST) .Not. Empty(M->A1_CEP)  //
// A1_CEP  A1_COD_MUN  VAR_IXB[6]                                                              ValType(VAR_IXB)=='A'   //
// A1_CEP  A1_END      FwNoAccent(VAR_IXB[3])                                                  ValType(VAR_IXB)=='A'   //
// A1_CEP  A1_BAIRRO   FwNoAccent(VAR_IXB[4])                                                  ValType(VAR_IXB)=='A'   //
// A1_CEP  A1_MUN      FwNoAccent(VAR_IXB[2])  (PODE NÃO SER NECESSÁRIO)                       ValType(VAR_IXB)=='A'   //
//---------------------------------------------------------------------------------------------------------------------//
Static cArqWSDL	:= U_CXArqCst('AtendeCliente.xml','CORREIOS',/*cFilBsc*/)		AS Character
Static cURL		:= GetMV('MX_URLCORR',.F.,'https://apps.correios.com.br/SigepMasterJPA/AtendeClienteService/AtendeCliente?wsdl')
//-------------------------------------------------------------------------------------------------
User Function CXBuscaCEP(	cCEP	,;	//01
							lMsg	,;	//02
							lGat	);	//03
								AS Array
	
	//Declaração de Variáveis----------------------------------------------------------------------
	Local aRet			AS Array
	Local aFunDesc		AS Array
	Local nX			AS Integer
	Local bBusca		AS CodeBlock
	
	//Parâmetros da rotina-------------------------------------------------------------------------
	ParamType 0		VAR cCEP		AS Character			//Optional Default &(ReadVar())
	ParamType 1		VAR lMsg		AS Logical				Optional Default .Not. U_CXRotAuto()
	ParamType 2		VAR lGat		AS Logical				Optional Default .F.

	//Inicializa Variaveis-------------------------------------------------------------------------
	bBusca	:= {|| aRet	:= BuscaCEP(cCEP,lMsg) }

	If lGat
		VAR_IXB	:= NIL		//Reseto a variáveis compartilhada

		If U_CXRotAuto()	//Não executa nas rotinas automáticas
			Return NIL
		EndIf

		aFunDesc	:= StrTokArr2(FWSuperGetMV('MX_BSCCEPF',.f.,'M030APICGC,M020APICGC'),',')	//Funções desconsideradas no prcessamento
		For nX := 1 to Len(aFunDesc)
			If FWIsInCallStack(aFunDesc[nX])	//Estas funções não devem executar
				Return NIL
			EndIf
		Next

		cCEP	:= U_CXSoNumeros(cCEP)
		If .Not. Empty(cCEP) .And. ;
			Val(cCEP) > 0

			MsgRun("Consultando CEP - Aguarde...",U_CXTxtMsg(,,.T.),bBusca)
		EndIf

		If ValType(aRet) <> 'A'
			//aRet	:= U_CXArray('',6)
		Else
			VAR_IXB	:= aClone(aRet)	//Guardo nesta variável para utilizar nos gatilhos
		EndIf
	Else
		eVal(bBusca)
	EndIf

Return aRet

//-------------------------------------------------------------------------------------------------
Static Function BuscaCEP(	cCEP	,;	//01
							lMsg	);	//02
								AS Array

	//Declaração de Variáveis----------------------------------------------------------------------
	Local oWsdl			AS Object
	Local aOps			AS Array
	Local aSimple		AS Array
	Local nPos			AS Integer
	Local nPCep			AS Integer

	Local aRet			AS Array
	Local lRet			AS Logical
	Local oXml			AS Object
	Local cXml			AS Character
	Local cXMLRet		AS Character
	Local cMun			AS Character
	
	Local oArea			AS Object

	//Incialização de Variáveis--------------------------------------------------------------------
	lRet	:= .T.
	oArea	:= tCtrlAlias():GetArea({'CC2'})

	//Variaveis compartilhadas de mensagens de erro
	cMsgErr		:= IIf(Type('cMsgErr')<>'C','',cMsgErr)
	cCodErr		:= IIf(Type('cCodErr')<>'C','',cCodErr)
	cSoluc		:= IIf(Type('cSoluc')<>'C','',cSoluc)
	cMsg		:= IIf(Type('cMsg')<>'C','',cMsg)
	
	//---------------------------------------------------------------------------------------------
	// Cria o objeto da classe TWsdlManager
	oWsdl 		:= TWsdlManager():New()
	oWsdl:bNoCheckPeerCert	:= .T.	//Desabilita o check de CAs
	oWsdl:nTimeout			:= 60	//Timeout no processo de envio
	
	//https://tdn.totvs.com/display/tec/Acesso+a+Web+Services+que+exigem+certificados+de+CA
   	oWsdl:cSSLCACertFile := U_CXArqCst("CAcorreios.pem",'CORREIOS',/*cFilBsc*/)
//  oWsdl:cSSLCertFile   := U_CXArqCst("ClientCert.pem",'CORREIOS',/*cFilBsc*/)
//  oWsdl:cSSLKeyFile    := U_CXArqCst("ClientKey.pem",'CORREIOS',/*cFilBsc*/)
//  oWsdl:cSSLKeyPwd     := "password" //se necessário

	// Faz o parse de uma URL ou do Arquivo--------------------------------------------------------
	If U_CXFile(cArqWSDL,.F.)
		lRet		:= oWsdl:ParseFile( cArqWSDL )
	Else
		lRet		:= oWsdl:ParseURL( cURL )	//Busca pela URL
	EndIf

	If .Not. lRet
		cCodErr	:= U_CXTxtMsg(,,.T.)
		cMsgErr	:= "Erro ParseFile: " + oWsdl:cError
		cSoluc	:= 'INFORME O SETOR DE T.I.'
		cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
		U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		
		If lMsg
			U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
		EndIf

		Return NIL
	EndIf
	
	//-------------------------------------------------------------------------------------------//
	//SÓ FUNCIONOU QUANDO SETEI AS INFORMAÇÕES ABAIXO, MESMO EU ALIMENTANDO DIRETAMENTE O XML    //
	//-------------------------------------------------------------------------------------------//
	aOps := oWsdl:ListOperations()
 	If 	ValType(aOps) <> 'A' .Or. ;
	 	Len( aOps ) == 0
	
		cCodErr	:= U_CXTxtMsg(,,.T.)
		cMsgErr	:= "Erro ListOperations: " + oWsdl:cError
		cSoluc	:= 'INFORME O SETOR DE T.I.'
		cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
		U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		
		If lMsg
			U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
		EndIf

		Return NIL
	Endif
 
 	//Busca do Método consultaCEP
	nPos	:= aScan(aOps,{|x| Lower(x[1]) == 'consultacep' })
	If nPos == 0
		cCodErr	:= U_CXTxtMsg(,,.T.)
		cMsgErr	:= 'ERRO AO LOCALIZAR MÉTODO CONSULTACEP.'
		cSoluc	:= 'INFORME O SETOR DE T.I.'
		cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
		U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		U_CXConOut('LISTA DE OPERAÇÕES O WSDL')
		VarInfo( "", aOps )	//Mostra lista de operações no console p/ Debug
		
		If lMsg
			U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
		EndIf

		Return NIL
	EndIf

	// Define a operação
	lRet := oWsdl:SetOperation( aOps[nPos][1] )
	If .Not. lRet

		cCodErr	:= U_CXTxtMsg(,,.T.)
		cMsgErr	:= "Erro SetOperation: " + oWsdl:cError
		cSoluc	:= 'INFORME O SETOR DE T.I.'
		cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
		U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		U_CXConOut('LISTA DE OPERAÇÕES O WSDL')
		VarInfo( "", aOps )	//Mostra lista de operações no console p/ Debug
		
		If lMsg
			U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
		EndIf

		Return NIL
	endif
	
	//Busca os parâmetros da operação
	aSimple := oWsdl:SimpleInput()
	If ValType(aSimple) <> 'A'

		cCodErr	:= U_CXTxtMsg(,,.T.)
		cMsgErr	:= "Erro SimpleInput: " + oWsdl:cError
		cSoluc	:= 'INFORME O SETOR DE T.I.'
		cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
		U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		U_CXConOut('LISTA DE OPERAÇÕES O WSDL')
		VarInfo( "", aOps )	//Mostra lista de operações no console p/ Debug
		
		If lMsg
			U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
		EndIf

		Return NIL
	endif

	//Parâmetros do Método consultaCEP
	nPos	:= aScan(aSimple,{|x| Lower(x[ncSI_NmPar]) == 'cep' })
	If nPos > 0
		nPCep	:= aSimple[nPos][nnSI_ID]
	Else
		cCodErr	:= U_CXTxtMsg(,,.T.)
		cMsgErr	:= 'ERRO AO LOCALIZAR PARÂMETRO CEP.'
		cSoluc	:= 'INFORME O SETOR DE T.I.'
		cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
		U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		U_CXConOut('LISTA DE OPERAÇÕES O WSDL')
		VarInfo( "", aOps )	//Mostra lista de operações no console p/ Debug
		
		If lMsg
			U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
		EndIf

		Return NIL
	EndIf

	//Chumbei o XML desta forma porque diretamente pela classe não funcionou
	cXml	:=	'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" '+;
				'xmlns:cli="http://cliente.bean.master.sigep.bsb.correios.com.br/">'+;
					'<soapenv:Header/>'+;
					'<soapenv:Body>'+;
						'<cli:consultaCEP>'+;
							'<cep>'+cCEP+'</cep>'+;
						'</cli:consultaCEP>'+;
					'</soapenv:Body>'+;
				'</soapenv:Envelope>'
	
	// Exibe a mensagem que será enviada
	U_CXConOut('#### MENSAGEM SOAP PARA ENVIO ####',,.T.)
	U_CXConOut(U_CXFormatXML(cXML))

	// Envia a mensagem SOAP ao servidor
	lRet := oWsdl:SendSoapMsg(cXml)
	If .Not. lRet

		If 'CEP NAO ENCONTRADO' $ FwNoAccent(Upper(oWsdl:cError))
			cCodErr	:= U_CXTxtMsg(,,.T.)
			cMsgErr	:= 'CEP '+cCEP+' não encontrado nos Correios.'
			cSoluc	:= ''
			cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
			U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		Else
			cCodErr	:= U_CXTxtMsg(,,.T.)
			cMsgErr	:= "Erro: " + oWsdl:cError
			cSoluc	:= 'INFORME O SETOR DE T.I.'
			cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
			U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
		EndIf

		If lMsg
			U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
		EndIf

		Return NIL
	Else	//-------------------------------------------------------------------------------------
		cXMLRet	:= oWsdl:GetSoapResponse()
		U_CXConOut('#### XML DA RESPOSTA DO SOAP ####',,.T.)
		U_CXConOut(U_CXFormatXML(cXMLRet))
		
		oXml	:= tCXXMLManager():New()
		If .Not. oXML:Parse(cXMLRet)
		
			cCodErr	:= U_CXTxtMsg(,,.T.)
			cMsgErr	:= "Falha ao consultar XML de resposta : "+oXML:Error()+" / "+oXML:Warning()
			cSoluc	:= 'INFORME O SETOR DE T.I.'
			cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
			
			U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
			
			If lMsg
				U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
			EndIf

			Return NIL
		EndIf

		oXML:CXRegisterNS()
		//oXML:XPathRegisterNsList( oXML:XPathGetRootNsList() )
		//Precisou registrar aqui porque ele vem de forma separada no XML mesmo
		oXML:XPathRegisterNs( "ns2", "http://cliente.bean.master.sigep.bsb.correios.com.br/" )
		
		//Verifica estrutura do XML de retorno
		If 	oXML:CXSetXPath( '/soap:Envelope/soap:Body/ns2:consultaCEPResponse/return' )
			If 	.Not. oXML:XPathHasNode( "/uf" ) .Or. ;
				.Not. oXML:XPathHasNode( "/cidade" )

				cCodErr	:= U_CXTxtMsg(,,.T.)
				cMsgErr	:= "ERRO no retorno dos Correios, faltando campos de retorno."
				cSoluc	:= 'INFORME O SETOR DE T.I.'
				cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')
				
				U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
			
				If lMsg
					U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
				EndIf

				Return NIL
			Else
				aRet	:= Array(06)
				aRet[1]	:= oXML:XPathGetNodeValue( "/uf" )
				aRet[2]	:= oXML:XPathGetNodeValue( "/cidade" )
				aRet[3]	:= ''
				aRet[4]	:= ''
				aRet[5]	:= ''
				aRet[6]	:= ''
				
				If oXML:XPathHasNode( "/end" )
					aRet[3]	:= oXML:XPathGetNodeValue( "/end" )
				EndIf

				If oXML:XPathHasNode( "/bairro" )
					aRet[4]	:= oXML:XPathGetNodeValue( "/bairro" )
				EndIf

				If oXML:XPathHasNode( "/complemento2" )
					aRet[5]	:= oXML:XPathGetNodeValue( "/complemento2" )
				EndIf
			
				cMun	:= AllTrim(aRet[2])
				cMun	:= Upper(cMun)
				cMun	:= FwNoAccent(cMun)
				CC2->(U_CXSetOrd(4)) //CC2_EST+CC2_MUN
				If CC2->(MsSeek(FWxFilial('CC2')+aRet[1]+cMun))
					aRet[6]	:= CC2->CC2_CODMUN
				Else
					cCodErr	:= U_CXTxtMsg(,,.T.)
					cMsgErr	:= 'ERRO ao localizar o município '+cMun+'/'+aRet[1]+' na tabela do sistema (CC2).'
					cSoluc	:= ''
					cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')

					ApMsgAlert('<b>PROBLEMA:</b>'+cMsgErr+IIf(!Empty(cSoluc),CRLF+'<b>SOLUÇÃO:</b>'+cSoluc,''),cCodErr)
				EndIf
			EndIf
		Else
			cCodErr	:= U_CXTxtMsg(,,.T.)
			cMsgErr	:= 	"ERRO no XML de retorno do "+oXML:_xPath+CRLF+;
						"VERIFIQUE SE O CEP É VÁLIDO NOS CORREIOS."
			cSoluc	:= ''
			cMsg	:= cCodErr+': '+cMsgErr+IIf(!Empty(cSoluc),CRLF+'SOLUÇÃO: '+cSoluc,'')

			U_CXConOut('#### ERRO #### '+cMsg)	//Apresenta a mensagem de erro no console
			U_CXConOut('XML: ')
			U_CXConOut(U_CXFormatXML(cXMLRet))
			If lMsg
				U_CXHelp(cCodErr,,cMsgErr,,cSoluc)
			EndIf

			Return NIL
		EndIf
		
	EndIf 

	If ValType(oXml) == 'O'
		oXML:Destroy()
		FwFreeVar(oXml)
		oXml	:= NIL
	EndIf

	If ValType(oWsdl) == 'O'
		FwFreeVar(oWsdl)
		oWsdl	:= NIL
	EndIf	

	oArea:RestArea()	//Restaura a area
	
Return aRet
